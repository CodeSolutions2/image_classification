


Transfer the model.json file to google storage


gcloud iam service-accounts keys list --iam-account=$SERVICE_ACCOUNT

# ----------------------------------------------------

# Enable key
https://cloud.google.com/iam/docs/keys-disable-enable#disabling

gcloud iam service-accounts keys enable 8add055e4f0c07611c5bcb1f2eb978378f57688b --iam-account=$SERVICE_ACCOUNT --project=$PROJECT_ID

# ----------------------------------------------------

cat key.json

copy-paste text inside key.json

clear

# ----------------------------------------------------

# [Step 2]
# ---------------------------
# On Kaggle run three cells
# ---------------------------
%%bash --err null
cat > key.json <<EOF
{
  "type": "service_account",
  "project_id": "textprocessing1",
  "private_key_id": "b2c9a6f7779ab4b3bdf1346bbbe8b5b539a35b1b",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCoajVaKbscEAfq\n8FKXFREp0wh6QRDX7LTEE/znOkAUJ4jdCakCeqfNurgFXLXrDg2pjfX+p/aHrq/4\nKnXygF5ApKcCOAXnOR/ek4Rrm3tSGxa4Ez6fBnAmONUciGZZflHc8NHb6Z65xNUe\nwWIq7j/ka7ltK0StGGoo4TRiCSPTlS+q3psO96egDFokDvLV1SMcwuhDSLdRlAiQ\n8cXSS4y/Ll38FvsghosMMicdJ8KQDPPHLZh0+gPmkUvnMb+nkWGiqYueN+uUhVLS\n3NtyEky5eoZqyqEHMRTKs8VpliTfPoSmyRa/lvFlCgwxYbwKO4sKCbMkqcZTyo6e\nyK+i1JjfAgMBAAECggEAALt750ztU93ptnt9Dis2WcLqMtPX0O1I1RhOt+b2AuN5\nH4SQm5WK53kroN7pk67gpb3SixPO6nzHfK32jTBJt2tGlYC5Zdj2WwLpcJ5ac5SS\nRXG8K47/OkWIReJZH76KyQKuNFp1oKQS5pclpRvmVJlxftkkGdObJLV9UCPJWXfw\nZyOGt8WtqVA9UIEAXAzKNRFqBs1op91OE8hxcBusPgnVDxOU4UmN8HSNxB+c1hph\nz+1zsgMx7wKXGwqLBBU6yU0ZYPgm3XncevfSsve/6+02B72so/SpSv2X7I/o4zet\nCNz/+aAPGQMDSmgbl41fVz39VhdXBaR8QbgENa5aQQKBgQDctWTFB0FzBpslOLxC\nFMxvouPNN90RpPWheFR/I7nJN6ChbWW6h3HBEAt+stndakW1rpkOjB8X27yEPHdQ\nxLN/hbuZwSmoSf7RR+dy+jj4EH+0ZK+srAE1tfQ5zfJe0RV6EKKcENnfWi3PMVmX\nVawk9w/da60H7HhbeJGWt4Jd2QKBgQDDWDIndCztZ0d1eYxuWMJ5EgL10vOK5lT3\nsNqP/9YprdSHAg31j12wH3wygCoPX7I9OBLOoBuT7f3/JL9TnXzKR/G7NDVAUrxj\n80v1aV1BEasBuhgdJ1Z6rygsN316xKmwADfuYjElRTnVB9xtsazC8Vccwl9BcHSY\njEmoUPIhdwKBgEq5y7V94GX+jZbLn8nL2u/NOc2opVus+1FBOXKWePessuEU9gVy\niEwyj4HFMkhqC9IYnE+1l21vg2NOSaN6BcAeWkcThHQrIXBgJPfjylgK1gIQuP4A\neqRhx5+un+oEZn4elb+7YNjjYnEtJ0U6x374e1GffEUbhiCKMNjTpvr5AoGAKbuA\n0371Ti6fTJCQGM7rlRPs//l2QDle85+bweHFLhhN7B3bP5fGSyce0GcjFS+7k2qU\nUgJQgfT5K3X9Te66RzjBgt3vdnN2fd/vXVmKK6mLoA3Ssv/BcOpUqcWdEApNuiUB\nzfK6Tx0P8twAEos/vlHy61j3IrLUpfZqkgPhBpcCgYA3l9o1rZ7NSYzJMSSRMEBy\n7tFdpH8vSgtbvzXV3pVITdm8PGbflOOy+iqlj4dtDAIiy3ybxsCWfwZi+2juuYsO\nFgVT6gIx+leMU1iX12vYz/8JzDxPPESzXmYnXABEVA84uNVHRftTcFvjFEjbJzQi\nx5i7Xx4ymrN7qA1vj34mjQ==\n-----END PRIVATE KEY-----\n",
  "client_email": "send2bucket@textprocessing1.iam.gserviceaccount.com",
  "client_id": "100920532448837010632",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/send2bucket%40textprocessing1.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
EOF

# View storage buckets
gcloud storage ls

export BUCKET_NAME=$(echo "tensorflowjsmodels0")

# Create a bucket
export LOCATION=$(echo "europe-west9")
# https://cloud.google.com/storage/docs/uniform-bucket-level-access
gcloud storage buckets create gs://$BUCKET_NAME --project=$PROJECT_ID --default-storage-class=STANDARD --location=$LOCATION 

gcloud storage cp model.json gs://tensorflowjsmodels0/

# Make data be accessable 
gcloud storage objects update gs://$BUCKET_NAME/model.json --add-acl-grant=entity=AllUsers,role=READER

# Use the https path to refer to the model
https://storage.googleapis.com/tensorflowjsmodels0/model.json

# Use storage path to refer to the model
gs://tensorflowjsmodels0/model.json





# ----------------------------------------------------
# Errors
# ----------------------------------------------------
Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://storage.googleapis.com/tensorflowjsmodels0/model.json. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 200.

Uncaught (in promise) TypeError: NetworkError when attempting to fetch resource. 

# ----------------------------------------------------

Uncaught (in promise) Error: Unknown layer: TFOpLambda. This may be due to one of the following reasons:
1. The layer is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom layer is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().






# ----------------------------------------------------
# Git usage on Kaggle
# ----------------------------------------------------
%%bash --err null
cd /kaggle/working
cat > github_gh_library.sh <<EOF
#!/bin/bash
# RUN IT
# cd /kaggle/working/
# source ./github_gh_library.sh
# push_pull_changes_from_PC_to_a_repo_branch /kaggle/working test_4_webapps

configure_settings_file(){

    # Inputs:
    # $1 = username
    # $2 = useremail
    # $3 = URL
    # $4 = git_dir_folder_path
    
    git config --global user.name $1
    git config --global user.email $2
    git config --global remote.origin.url $3    # changes remote.origin.url in /home/oem2/.gitconfig
    
    # Define a safe directory on the PC
    git config --global --add safe.directory $4
    
    # View configuration file
    # git config --list --show-origin
}

# ---------------------------------------------

pull_from_a_branch_repo(){

    # Inputs:
    # $1 = folder_path_outside_git_dir # /kaggle/working/git2
    # $2 = git_dir_folder_path # /kaggle/working/git2/REPO
    # $3 = branch_name
    
    # ------------------- 
    # Push from an assigned initial branch : these steps are performed once before modifying files
    # ------------------- 
    # Should be outside the git directory when initializing a local directory
    mkdir $1
    cd $1
    
    mkdir $2
    
    # Should be in the git directory when pulling files
    cd $2
    
    # Initialize the local directory and set the initial branch name to main
    git init -b $3
    
    # Pull Repository from github first, while synchronizing the branches
    git pull origin $3 --allow-unrelated-histories

}

# ---------------------------------------------

push_to_a_branch_repo(){

    # Inputs:
    # $1 = git_dir_folder_path
    # $2 = branch_name
    
    # ------------------- 
    # Push from an assigned initial branch : these steps repeat 
    # -------------------
    # Should be in git directory when adding files to be updated
    cd $1
    git add .     # (if you want to add everything in the local repository that was specified in the config file)
    
    # Should be in git directory when commiting files
    git commit -m "comment"
    
    # Should be in git directory when pushing files to the main branch
    git push origin $2
    # ------------------- 

}

# ---------------------------------------------

push_pull_changes_from_PC_to_a_repo_branch(){

    # Inputs:
    # $1 = folder_path	# Directory where to put the files: export folder_path=$(echo "/kaggle/working")
    # $2 = NOMDEREPO	# Name of the repository: export NOMDEREPO=$(echo "test_4_webapps")

	export cur_path=$(pwd)
	echo "cur_path:"
	echo $cur_path

  # ***** CHANGE ONLY *****
	export username=$(echo "CodeSolutions2")
	export useremail=$(echo "j622amilah@gmail.com")
	export connection_method=$(echo "HTTPS")  # SSH or HTTPS
		
	# Name of folder where the repository is located
	export folder_name=$(echo "git2")

	# Name of the branch to use to make changes to the repository
	export branch_name=$(echo "main")   # the name can be anything but 'master'
	# ***** CHANGE ONLY *****

	# Define existing PATHS: Set repo and path variables
	export folder_path_outside_git_dir=$(echo "$1/$folder_name")
	export git_dir_folder_path=$(echo "$folder_path_outside_git_dir/$2")

	# Configure file Settings
	if [[ $connection_method == "HTTPS" ]]; then
	     # HTTPS
	     export URL=$(echo "https://github.com/$username/$2.git")
	else
	     # SSH
	     export URL=$(echo "git@github.com:$username/$2.git")
	fi
	
	configure_settings_file $username $useremail $URL $git_dir_folder_path

	# Create a new folder to do git pull from the old repo files
	export folder_TEMP=$(echo "_pulled_folder")
	
	export folder_path_outside_git_dir_TEMP=$(echo "$1/$folder_name$folder_TEMP")
	export git_dir_folder_path_TEMP=$(echo "$folder_path_outside_git_dir_TEMP/$2")

	# PULL from repo : one must pull to a new folder, or else it will copy over your files that you changed
	echo 'Pulling repo from GitHub'
	pull_from_a_branch_repo $folder_path_outside_git_dir_TEMP $git_dir_folder_path_TEMP $branch_name
	
	# Delete all the file except .git
	mv .git $folder_path_outside_git_dir_TEMP
	cd $folder_path_outside_git_dir_TEMP
	rm -rf $git_dir_folder_path_TEMP
	mkdir $git_dir_folder_path_TEMP
	mv .git $git_dir_folder_path_TEMP

	# Remove .git from old folder; Leave the .git in the git2_pulled_folder because it gives the state of the files on the GitHub repo, we want to update this with the GitHub commands
	cd $git_dir_folder_path
	rm -rf .git
	
	# Copy the new files from my PC to the temp folder
	cp -a $git_dir_folder_path/. $git_dir_folder_path_TEMP
	cd $git_dir_folder_path_TEMP

	# PUSH to repo on the main branch
	echo 'Pushing changes back to repo'
	push_to_a_branch_repo $git_dir_folder_path_TEMP $branch_name
	
	# Rename the OLD folder as something to delete (automatic deleting can be dangerous)
	mv $folder_path_outside_git_dir $1/git2_OLD_to_delete

	# Rename new folder as the old folder
	mv $folder_path_outside_git_dir_TEMP $folder_path_outside_git_dir
	
	# Return to the orginal path, instead of staying in the push path
	cd $cur_path
}
EOF

# ----------------------------------------------------

%%bash --err null
cd /kaggle/working
cat > git_push_pull.sh <<EOF
    #!/bin/bash
    export cur_path=$(pwd)
    echo "cur_path:"
    echo $cur_path

    # ***** CHANGE ONLY *****
    export folder_path=$(echo "/kaggle/working")
    export NOMDEREPO=$(echo "test_4_webapps")
    export username=$(echo "CodeSolutions2")
    export useremail=$(echo "j622amilah@gmail.com")
    # export connection_method=$(echo "HTTPS")  # SSH or HTTPS
    connection_method="HTTPS"

    # Name of folder where the repository is located
    export folder_name=$(echo "git2")

    # Name of the branch to use to make changes to the repository
    export branch_name=$(echo "main")   # the name can be anything but 'master'

    # Configure file Settings
    echo 'connection_method'
    echo $connection_method
    if [[ $connection_method = "HTTPS"]]
    then
         # HTTPS
         export URL=$(echo "https://github.com/$username/$NOMDEREPO.git")  # HTTPS
    else
         
         export URL=$(echo "git@github.com:$username/$NOMDEREPO.git")  # SSH
    fi
    # ***** CHANGE ONLY *****

    # Define existing PATHS: Set repo and path variables
    export folder_path_outside_git_dir=$(echo "$folder_path/$folder_name")
    export git_dir_folder_path=$(echo "$folder_path_outside_git_dir/$NOMDEREPO")

    # Configure settings file
    git config --global user.name $username
    git config --global user.email $useremail
    git config --global remote.origin.url $URL

    # Create a new folder to do git pull from the old repo files
    export folder_TEMP=$(echo "_pulled_folder")
    export folder_path_outside_git_dir_TEMP=$(echo "$folder_path/$folder_name$folder_TEMP")
    export git_dir_folder_path_TEMP=$(echo "$folder_path_outside_git_dir_TEMP/$NOMDEREPO")

    # PULL from repo : one must pull to a new folder, or else it will copy over your files that you changed
    echo 'Pulling repo from GitHub'
    # Should be outside the git directory when initializing a local directory
    mkdir $folder_path_outside_git_dir_TEMP
    cd $folder_path_outside_git_dir_TEMP

    mkdir $git_dir_folder_path_TEMP

    # Should be in the git directory when pulling files
    cd $git_dir_folder_path_TEMP

    # Initialize the local directory and set the initial branch name to main
    git init -b $branch_name

    # Pull Repository from github first, while synchronizing the branches
    git pull origin $branch_name --allow-unrelated-histories


    # Delete all the file except .git
    mv .git $folder_path_outside_git_dir_TEMP
    cd $folder_path_outside_git_dir_TEMP
    rm -rf $git_dir_folder_path_TEMP
    mkdir $git_dir_folder_path_TEMP
    mv .git $git_dir_folder_path_TEMP

    # Remove .git from old folder; Leave the .git in the git2_pulled_folder because it gives the state of the files on the GitHub repo, we want to update this with the GitHub commands
    cd $git_dir_folder_path
    rm -rf .git

    # Copy the new files from my PC to the temp folder
    cp -a $git_dir_folder_path/. $git_dir_folder_path_TEMP
    cd $git_dir_folder_path_TEMP

    # PUSH to repo on the main branch
    echo 'Pushing changes back to repo'
    # Should be in git directory when adding files to be updated
    cd $git_dir_folder_path_TEMP
    git add .     # (if you want to add everything in the local repository that was specified in the config file)

    # Should be in git directory when commiting files
    git commit -m "comment"

    # Should be in git directory when pushing files to the main branch
    git push origin $branch_name


    # Rename the OLD folder as something to delete (automatic deleting can be dangerous)
    mv $folder_path_outside_git_dir $1/git2_OLD_to_delete

    # Rename new folder as the old folder
    mv $folder_path_outside_git_dir_TEMP $folder_path_outside_git_dir

    # Return to the orginal path, instead of staying in the push path
    cd $cur_path
EOF

# ----------------------------------------------------

!chmod +x git_push_pull.sh
!./git_push_pull.sh

# ----------------------------------------------------


# ----------------------------------------------------


# ----------------------------------------------------


# ----------------------------------------------------


